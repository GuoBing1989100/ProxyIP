name: Go Proxy Checker Action

on:
  workflow_dispatch: # Memungkinkan menjalankan manual dari tab Actions
  # schedule:
  #   - cron: "0 */6 * * *" # Contoh: jalankan setiap 6 jam sekali

jobs:
  check_proxies:
    runs-on: ubuntu-latest
    name: Run Go Proxy Checker

    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          # Token ini diperlukan agar Action bisa melakukan push kembali ke repository.
          # Pastikan kamu sudah membuat secret bernama GIT_TOKEN di repository-mu.
          token: ${{ secrets.GIT_TOKEN }}

      - name: 🚀 Set Up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Ganti dengan versi Go yang kamu gunakan di go.mod jika berbeda

      # Langkah 'go mod tidy' biasanya tidak diperlukan di CI jika go.mod dan go.sum sudah up-to-date
      # dan di-commit ke repository. Namun, bisa ditambahkan jika ingin memastikan.
      # - name: 📦 Download Go Modules
      #   run: go mod download

      - name: 🏃 Run Go Proxy Checker
        run: |
          # OPSI 1: Menjalankan dengan file input default (Data/ISPproxy.txt)
          # Pastikan konstanta defaultProxyFile di main.go sudah benar (misal, "Data/ISPproxy.txt")
          # dan file tersebut ada di repository dalam folder Data.
          go ./cekproxyiprun main.go

          # OPSI 2: Jika kamu ingin menggunakan input dari URL secara default di Actions
          # Ganti 'https://url.kamu/daftarproxy.txt' dengan URL sebenarnya.
          # go run main.go -i https://url.kamu/daftarproxy.txt

          # OPSI 3: Jika kamu ingin menggunakan file input spesifik (selain default)
          # Pastikan file ini ada di repository.
          # go run main.go -f Data/nama_file_proxymu.txt
        # PENTING: Pilih dan aktifkan (uncomment) HANYA SATU dari opsi 'go run ...' di atas,
        # atau sesuaikan dengan kebutuhanmu. Contoh di atas menggunakan OPSI 1.

      - name: 📤 Commit and Push Changes
        # Hanya jalankan jika langkah sebelumnya berhasil
        if: ${{ success() }}
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions-bot@users.noreply.github.com" # Email standar untuk bot
          
          # Tambahkan file output yang spesifik.
          git add Data/alive.txt
          
          # Cek apakah ada perubahan untuk di-commit
          # `git diff --staged --quiet` akan exit dengan 0 jika tidak ada perubahan, 1 jika ada.
          # `!` membalik hasilnya, jadi blok if dijalankan jika ada perubahan.
          if ! git diff --staged --quiet; then
            git commit -m "🔁 Update proxy list (Go)"
            # Push ke branch yang sama dengan yang memicu workflow.
            # Penggunaan --force bisa berisiko, pertimbangkan baik-baik.
            # Jika ini adalah branch utama, mungkin lebih baik push ke branch lain dan buat Pull Request.
            git push origin HEAD:${{ github.ref_name }} --force 
          else
            echo "No changes to commit in Data/alive.txt."
          fi
